// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, se+ts the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	ALU(x=dregout , y=alumuxout , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=aluoutfull, out=outM , zr=zr , ng=ng );

    // set logic for jumps
    Or(a=zr , b=ng , out=orzrng );
    Not(in=orzrng , out=gt ); // create a greater than gate

    And(a=ng , b=instruction[2] , out=ngreq ); // is checking ng needed
    And(a=zr , b=instruction[1] , out=zrreq ); // is checking zr needed
    And(a=gt , b=instruction[0] , out=gtreq ); // is checking gt needed
    Or(a=ngreq , b=zrreq , out=bothreq );
    Or(a=bothreq , b=gtreq , out=loadpcins ); // if any correct then jmp
    And(a=loadpcins , b=instruction[15] , out=loadpc ); // if C ins then jmp

    // A register mappings
    Not(in=instruction[15] , out=loadins );
    Or(a=loadins , b=instruction[5] , out=loadareg );
    ARegister(in=aregin , load=loadareg , out=aregout, out[0..14]=addressM );
    
     // D register mappingsz
    And(a=instruction[15] , b=instruction[4] , out=loaddreg );
    DRegister(in=aluoutfull , load=loaddreg , out=dregout );
    
    // manage pc
    Or(a=reset , b=loadpc , out=resetorloadpc );
    Not(in=resetorloadpc , out=incpc ); // inc if not (reset or load)
    PC(in=aregout , load=loadpc , inc=incpc , reset=reset , out[0..14]=pc );

    And(a=instruction[15] , b=instruction[3] , out=writeM );

    Mux16(a=instruction , b=aluoutfull , sel=instruction[15] , out=aregin ); // a reg mux
    Mux16(a=aregout , b=inM , sel=instruction[12] , out=alumuxout ); // alu mux
}